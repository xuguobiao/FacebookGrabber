/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fbgrabber;

import fbgrabber.bean.FbGroupInfo;
import fbgrabber.bean.FbGroupUserInfo;
import fbgrabber.bean.FbUserInfo;
import fbgrabber.common.CommonUtils;
import fbgrabber.common.Constants;
import fbgrabber.model.FbGroupModel;
import fbgrabber.model.FbGroupInfoCallback;
import fbgrabber.model.FbUserModel;
import fbgrabber.model.Urls;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicInteger;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author Kido
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        setLocationRelativeTo(null);
        Image titleIcon = Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("kido.jpg"));
        setIconImage(titleIcon);
        setTitle(Constants.APP_TITLE + " " + Constants.VERSION_NAME);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        emailTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        loginButton = new javax.swing.JButton();
        loginLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        groupNameTextField = new javax.swing.JTextField();
        groupGrabButton = new javax.swing.JButton();
        groupClearLogButton = new javax.swing.JButton();
        groupClearCacheButton = new javax.swing.JButton();
        groupLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        groupTextArea = new javax.swing.JTextArea();
        openGroupFileFolderButton = new javax.swing.JButton();
        groupOpenButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        groupLimitTextField = new javax.swing.JTextField();
        groupStopButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Email:");

        emailTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Password:");

        loginButton.setText("Login");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        loginLabel.setForeground(new java.awt.Color(229, 0, 0));
        loginLabel.setText("Not Logged in.");

        jLabel3.setText("Group Id / URL:");

        groupGrabButton.setText("Grab it!");
        groupGrabButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupGrabButtonActionPerformed(evt);
            }
        });

        groupClearLogButton.setText("Clear Log");
        groupClearLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupClearLogButtonActionPerformed(evt);
            }
        });

        groupClearCacheButton.setText("Clear Cache");
        groupClearCacheButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupClearCacheButtonActionPerformed(evt);
            }
        });

        groupLabel.setForeground(new java.awt.Color(0, 102, 255));
        groupLabel.setText("...");

        groupTextArea.setColumns(20);
        groupTextArea.setRows(5);
        jScrollPane1.setViewportView(groupTextArea);

        openGroupFileFolderButton.setText("Open File Folder");
        openGroupFileFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openGroupFileFolderButtonActionPerformed(evt);
            }
        });

        groupOpenButton.setText("Open it!");
        groupOpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupOpenButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Limit:");

        groupStopButton.setText("Stop it!");
        groupStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupStopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(groupNameTextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(groupGrabButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(groupStopButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(groupOpenButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(groupClearLogButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(groupClearCacheButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(openGroupFileFolderButton)
                                .addGap(18, 18, 18)
                                .addComponent(groupLabel))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(groupLimitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 306, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(groupNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(groupGrabButton)
                    .addComponent(groupOpenButton)
                    .addComponent(groupStopButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(groupLimitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(groupClearLogButton)
                    .addComponent(groupClearCacheButton)
                    .addComponent(openGroupFileFolderButton)
                    .addComponent(groupLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Group Members", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loginButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(loginLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loginButton)
                    .addComponent(loginLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void emailTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailTextFieldActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        login();
    }//GEN-LAST:event_loginButtonActionPerformed

    private void groupGrabButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupGrabButtonActionPerformed
        grabGroups();
    }//GEN-LAST:event_groupGrabButtonActionPerformed

    private void openGroupFileFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openGroupFileFolderButtonActionPerformed
        File groupFile = new File(Constants.GROUP_FOLDER_NAME);
        if (!groupFile.exists()) {
            groupFile.mkdirs();
        }
        CommonUtils.openFile(groupFile);

    }//GEN-LAST:event_openGroupFileFolderButtonActionPerformed

    private void groupClearLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupClearLogButtonActionPerformed
        groupTextArea.setText("");
    }//GEN-LAST:event_groupClearLogButtonActionPerformed

    private void groupClearCacheButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupClearCacheButtonActionPerformed
        FbGroupModel.getInstance().clearCache();
        FbUserModel.getInstance().clearCache();
    }//GEN-LAST:event_groupClearCacheButtonActionPerformed

    private void groupOpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupOpenButtonActionPerformed
        final List<String> groupList = getInputGroupList();
        for (String groupName : groupList) {
            try {
                String url = String.format(Urls.GROUP_MEMBERS, URLEncoder.encode(groupName, "UTF-8"));
                CommonUtils.openBrowser(url);
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }//GEN-LAST:event_groupOpenButtonActionPerformed

    private void groupStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupStopButtonActionPerformed
        mTryStop = true;
        group_logMessage("****** try stop the running task!!! ******");
    }//GEN-LAST:event_groupStopButtonActionPerformed

    private void login() {
        final String email = emailTextField.getText().trim();
        final String pass = passwordField.getText().trim();

        if ("".equals(email) || "".equals(pass)) {
            showDialog("Email or password cannot be empty!");
            return;
        }

        loginButton.setEnabled(false);
        loginLabel.setText("Logging...");
        mExecutorService.execute(new Runnable() {
            @Override
            public void run() {
                FbUserInfo info = null;
                try {
                    info = FbUserModel.getInstance().login(email, pass);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                String tips = info != null ? "Login successfully." : "Login failed.";
                loginLabel.setText(tips);
//                showDialog(tips);

                mLoginUserInfo = info;
                loginButton.setEnabled(true);
            }
        });
    }

    private List<String> getInputGroupList() {
        final List<String> groupList = new ArrayList<>();
        String groupName = groupNameTextField.getText().trim();
        String[] groupNames = groupName.split(";");
        for (int i = 0; i < groupNames.length; i++) {
            String name = groupNames[i].trim();
            if ("".equals(name)) {
                continue;
            }
            List<String> idList = CommonUtils.getMatchList("/groups/", "/", name + "/");
            groupList.add(idList.isEmpty() ? name : idList.get(0));
        }
        return groupList;
    }

    private void grabGroups() {
        if (mLoginUserInfo == null) {
            showDialog("Not Logged in currently, should login firstly!");
            return;
        }

        final List<String> groupList = getInputGroupList();

        if (groupList.isEmpty()) {
            showDialog("Group name should not be empty!");
            return;
        }
        int limit = CommonUtils.parse2Int(groupLimitTextField.getText().trim());
        if (limit <= 0) {
            limit = Integer.MAX_VALUE / 2;
        }
        final int fLimit = limit;
        mTryStop = false;
        groupGrabButton.setEnabled(false);
        groupLabel.setText("Start grabbing...");
        group_logMessage("****** [Start] grabbing group members ******");
        group_logMessage("Group names -> " + String.join(";", groupList));

        new Thread() {
            @Override
            public void run() {
                int size = groupList.size();
                for (int i = 0; i < size; i++) {
                    grabGroup(groupList.get(i), fLimit, i + "/" + size);
                    if (mTryStop) {
                        break;
                    }
                }
                groupGrabButton.setEnabled(true);
                group_logMessage("****** [End] ******");
                groupLabel.setText("End grabbing.");
                showDialog("Grabbing task is finished~");
            }
        }.start();
    }

    private void grabGroup(String groupName, int limit, String groupPercent) {
        group_logMessage("Grabbing... [" + groupPercent + "] " + groupName);
        group_logMessage("======================================== Limit=" + limit);

        try {
            String groupUniqueName = groupName;
//            group_logMessage("Searching group name...");
//            String groupUniqueName = FbGroupModel.getInstance().getGroupUniqueName(groupName);
//            group_logMessage("[groupUniqueName] = " + groupUniqueName);
            group_logMessage("Grabbing group info and member ids...");
            FbGroupInfo groupInfo = FbGroupModel.getInstance().getGroupInfo(groupUniqueName, limit,
                    new FbGroupInfoCallback() {
                @Override
                public boolean onProgress(FbGroupInfo groupInfo) {
                    group_tips(groupPercent, groupInfo.getAdminList().size() + groupInfo.getMemberList().size() + "/" + groupInfo.getTotalCount());
                    return !mTryStop;
                }
            });
            groupInfo.setUniqueName(groupUniqueName);
            group_logMessage("Group info -> " + groupInfo.toString());
            group_logMessage("Grabbing members detail info [start]********");

            List<FbGroupUserInfo> userInfos = groupInfo.getAllUsers();
            int userSize = userInfos.size();
            final AtomicInteger mCompleteCount = new AtomicInteger();

            for (final FbGroupUserInfo userInfo : userInfos) {
                mExecutorService.execute(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            FbUserInfo detailInfo = FbUserModel.getInstance().getUserInfo(userInfo.getId());
                            if (detailInfo != null) {
                                userInfo.setUserName(detailInfo.getUserName());
                                userInfo.setGender(detailInfo.getGender());
                                userInfo.setHometown(detailInfo.getHometown());
                                userInfo.setLocation(detailInfo.getLocation());
                            }
                        } catch (Exception e) {
                            String tips = String.format("Exception(Grabbing userInfo=%s) -> %s", userInfo.toString(), e.getMessage());
                            group_logMessage(tips);
                            e.printStackTrace();
                        } finally {
                            int completeCount = mCompleteCount.incrementAndGet();
                            group_tips(groupPercent, completeCount + "/" + userSize);
                        }
                    }
                });
            }

            while (true) {
                if (mTryStop) {
                    mExecutorService.shutdownNow();
                    throw new Exception("User attempts to stop the task.");
                }
                if (mCompleteCount.get() == userInfos.size()) {
                    break;
                }
            }

            write2File(groupInfo);

        } catch (Exception e) {
            group_logMessage("Exception(Grabbing group) -> " + e.getMessage());
            e.printStackTrace();
        }

        group_logMessage("Grabbing members [end]********");
        group_logMessage("========================================");

    }

    private synchronized void write2File(FbGroupInfo groupInfo) throws Exception {
        File folder = new File(Constants.GROUP_FOLDER_NAME);
        if (!folder.exists()) {
            folder.mkdirs();
        }
//        String fileName = groupInfo.getGroupName() + ".xls";
        String fileName = String.format(Constants.GROUP_FILE_NAME_FORMAT,
                groupInfo.getGroupId(),
                groupInfo.getTotalCount(),
                groupInfo.getAdminList().size(),
                groupInfo.getMemberList().size(),
                CommonUtils.getCurrentFormatTime(CommonUtils.TIMEFORMAT_STRING5)
        );
        File file = new File(folder, fileName);
        String[] csvHeader = {"NickName", "0", "1", "UserId", "UserName",
            "Gender", "Hometown", "0", "1", "2", "Location", "0", "1", "2",
            "Role", "JoinInfo", "ProfileUrl"
        };
        List<String[]> csvData = new ArrayList<>();

        List<FbGroupUserInfo> userInfos = groupInfo.getAllUsers();
        for (int i = 0, z = userInfos.size(); i < z; i++) {
            FbGroupUserInfo info = userInfos.get(i);
            String nickName = info.getNickName();
            String[] nickNameArr = {nickName, ""};
            int index = nickName.indexOf(" ");
            if (index > 0) {
                nickNameArr[0] = nickName.substring(0, index);
                nickNameArr[1] = nickName.substring(index, nickName.length());
            }

            String hometown = info.getHometown();
            String[] hometownArr = (hometown + ", , ,").split(",");
            String location = info.getLocation();
            String[] locationArr = (location + ", , ,").split(",");

            String[] data = {nickName, nickNameArr[0], nickNameArr[1], info.getId(), info.getUserName(),
                info.getGender(), hometown, hometownArr[0], hometownArr[1], hometownArr[2], location, locationArr[0], locationArr[1], locationArr[2],
                info.getRole() + "", info.getJoinInfo(), String.format(Urls.USER_PROFILE_PC, info.getId())
            };
            csvData.add(data);
        }

        try {
            group_logMessage("Writing members infos to csv...");
            CommonUtils.writeExcel(csvHeader, csvData, file);
            group_logMessage("Successfully saving in " + file.getAbsolutePath());
        } catch (Exception e) {
            group_logMessage("Writing csv exception->" + e.getMessage());
            e.printStackTrace();
        }
    }

    private synchronized void group_tips(String groupPercent, String memberPercent) {
        String tips = String.format("Group: %s, Member: %s", groupPercent, memberPercent);
        groupLabel.setText(tips);
    }

    private synchronized void group_logMessage(String message) {
        group_logMessage(message, true);
    }

    private synchronized void group_logMessage(String message, boolean append) {
        String info = "[" + CommonUtils.getCurrentFormatTime(0) + "]" + " " + message + "\n";
        if (append) {
            groupTextArea.append(info);
        } else {
            groupTextArea.setText(info);
        }
        groupTextArea.setSelectionStart(groupTextArea.getText().length());
    }

    private void showDialog(String tips) {
        JOptionPane.showMessageDialog(null, tips, Constants.APP_TITLE, JOptionPane.INFORMATION_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (Exception e) {
                } finally {
                    new MainFrame().setVisible(true);
                }
            }
        });
    }

    private ExecutorService mExecutorService = Executors.newFixedThreadPool(10);
    private FbUserInfo mLoginUserInfo;
    private boolean mTryStop;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField emailTextField;
    private javax.swing.JButton groupClearCacheButton;
    private javax.swing.JButton groupClearLogButton;
    private javax.swing.JButton groupGrabButton;
    private javax.swing.JLabel groupLabel;
    private javax.swing.JTextField groupLimitTextField;
    private javax.swing.JTextField groupNameTextField;
    private javax.swing.JButton groupOpenButton;
    private javax.swing.JButton groupStopButton;
    private javax.swing.JTextArea groupTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton loginButton;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JButton openGroupFileFolderButton;
    private javax.swing.JPasswordField passwordField;
    // End of variables declaration//GEN-END:variables
}
